import 'package:flutter/material.dart';
import 'package:tutorium_frontend/service/class_sessions.dart';
import 'package:tutorium_frontend/service/enrollments.dart';
import 'package:tutorium_frontend/util/schedule_validator.dart';
import 'package:tutorium_frontend/pages/widgets/schedule_conflict_dialog.dart';
import 'package:tutorium_frontend/services/local_notification_service.dart';
import 'package:tutorium_frontend/service/classes.dart';
import 'package:tutorium_frontend/service/users.dart';
import 'package:tutorium_frontend/util/local_storage.dart';

/// ‡∏õ‡∏∏‡πà‡∏° Enroll ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô
class EnrollButton extends StatefulWidget {
  final int sessionId;
  final int learnerId;
  final Function()? onEnrollSuccess;

  const EnrollButton({
    super.key,
    required this.sessionId,
    required this.learnerId,
    this.onEnrollSuccess,
  });

  @override
  State<EnrollButton> createState() => _EnrollButtonState();
}

class _EnrollButtonState extends State<EnrollButton> {
  bool _isLoading = false;

  Future<int> _getCurrentUserId() async {
    final userId = await LocalStorage.getUserId();
    if (userId == null) {
      throw Exception('Unable to get current user ID');
    }
    return userId;
  }

  Future<void> _handleEnroll() async {
    setState(() {
      _isLoading = true;
    });

    try {
      // 0. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô teacher ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final session = await ClassSession.fetchById(widget.sessionId);
      final classInfo = await ClassInfo.fetchById(session.classId);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• current user ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ teacher ID
      final currentUser = await User.fetchById(await _getCurrentUserId());
      if (currentUser.teacher != null &&
          currentUser.teacher!.id == classInfo.teacherId) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‡∏Ñ‡∏£‡∏π‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ'),
              backgroundColor: Colors.red,
            ),
          );
        }
        setState(() {
          _isLoading = false;
        });
        return;
      }

      // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final existingEnrollments = await Enrollment.fetchAll(
        query: {
          'learner_id': widget.learnerId,
          'class_session_id': widget.sessionId,
        },
      );

      if (existingEnrollments.isNotEmpty) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‡∏Ñ‡∏∏‡∏ì‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß'),
              backgroundColor: Colors.orange,
            ),
          );
        }
        setState(() {
          _isLoading = false;
        });
        return;
      }

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏Ñ‡∏ô)
      final enrollments = await Enrollment.fetchAll(
        query: {'class_session_id': widget.sessionId},
      );
      final currentEnrollmentCount = enrollments
          .where((e) => e.enrollmentStatus == 'active')
          .length;

      // Enforce maximum of 20 participants per session
      const maxParticipants = 20;
      final effectiveLimit = session.learnerLimit > maxParticipants
          ? maxParticipants
          : session.learnerLimit;

      if (currentEnrollmentCount >= effectiveLimit) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                '‡∏Ç‡∏≠‡πÇ‡∏ó‡∏© ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î $effectiveLimit ‡∏Ñ‡∏ô)',
              ),
              backgroundColor: Colors.red,
            ),
          );
        }
        setState(() {
          _isLoading = false;
        });
        return;
      }

      // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
      final validationResult = await ScheduleValidator.validateBeforeEnroll(
        learnerId: widget.learnerId,
        sessionId: widget.sessionId,
      );

      if (!validationResult['valid']) {
        // ‡πÅ‡∏™‡∏î‡∏á dialog ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô
        if (mounted) {
          ScheduleConflictDialog.show(
            context,
            message: validationResult['message'] ?? '‡∏û‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô',
            conflictSessions: validationResult['conflictSessions'],
          );
        }
        setState(() {
          _isLoading = false;
        });
        return;
      }

      // 4. ‡πÅ‡∏™‡∏î‡∏á confirmation dialog
      if (mounted) {
        final confirmed = await showDialog<bool>(
          context: context,
          builder: (context) => AlertDialog(
            title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô'),
            content: const Text('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(false),
                child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
              ),
              ElevatedButton(
                onPressed: () => Navigator.of(context).pop(true),
                child: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô'),
              ),
            ],
          ),
        );

        if (confirmed != true) {
          setState(() {
            _isLoading = false;
          });
          return;
        }
      }

      // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á enrollment
      final enrollment = Enrollment(
        classSessionId: widget.sessionId,
        enrollmentStatus: 'active',
        learnerId: widget.learnerId,
      );

      await Enrollment.create(enrollment);

      // 6. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡πÅ‡∏•‡∏∞ class ‡πÄ‡∏û‡∏∑‡πà‡∏≠ schedule notification
      try {
        final session = await ClassSession.fetchById(widget.sessionId);
        final classInfo = await ClassInfo.fetchById(session.classId);

        // Schedule class reminders
        await LocalNotificationService().scheduleClassReminders(
          classSessionId: widget.sessionId,
          className: classInfo.className,
          classStartTime: DateTime.parse(session.classStart).toLocal(),
        );

        // Show enrollment success notification
        await LocalNotificationService().showEnrollmentSuccess(
          className: classInfo.className,
          classStartTime: DateTime.parse(session.classStart).toLocal(),
        );

        debugPrint(
          '‚úÖ [Enrollment] Scheduled notifications for ${classInfo.className}',
        );
      } catch (e) {
        debugPrint('‚ö†Ô∏è [Enrollment] Failed to schedule notifications: $e');
      }

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text(
              '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéâ ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
            ),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 3),
          ),
        );
        widget.onEnrollSuccess?.call();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return ElevatedButton.icon(
      onPressed: _isLoading ? null : _handleEnroll,
      icon: _isLoading
          ? const SizedBox(
              height: 16,
              width: 16,
              child: CircularProgressIndicator(strokeWidth: 2),
            )
          : const Icon(Icons.app_registration),
      label: Text(_isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...' : '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô'),
      style: ElevatedButton.styleFrom(
        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
      ),
    );
  }
}

/// Widget ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Class Session ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏° Enroll
class ClassSessionCard extends StatelessWidget {
  final ClassSession session;
  final int learnerId;
  final Function()? onEnrollSuccess;

  const ClassSessionCard({
    super.key,
    required this.session,
    required this.learnerId,
    this.onEnrollSuccess,
  });

  @override
  Widget build(BuildContext context) {
    final start = DateTime.parse(session.classStart);
    final end = DateTime.parse(session.classFinish);
    final deadline = DateTime.parse(session.enrollmentDeadline);
    final now = DateTime.now();
    final isExpired = now.isAfter(deadline);

    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Title
            Text(
              session.description,
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),

            // Time
            Row(
              children: [
                const Icon(Icons.access_time, size: 16, color: Colors.grey),
                const SizedBox(width: 4),
                Expanded(
                  child: Text(
                    '${ScheduleValidator.formatDateTime(start)} - ${ScheduleValidator.formatDateTime(end)}',
                    style: const TextStyle(color: Colors.grey),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 4),

            // Enrollment Deadline
            Row(
              children: [
                Icon(
                  Icons.access_time,
                  size: 16,
                  color: isExpired ? Colors.red : Colors.orange,
                ),
                const SizedBox(width: 4),
                Text(
                  '‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£: ${ScheduleValidator.formatDateTime(deadline)}',
                  style: TextStyle(
                    color: isExpired ? Colors.red : Colors.orange,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 4),

            // Price & Limit
            Row(
              children: [
                const Icon(Icons.attach_money, size: 16, color: Colors.green),
                Text(
                  '‡∏ø${session.price.toStringAsFixed(2)}',
                  style: const TextStyle(
                    color: Colors.green,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(width: 16),
                const Icon(Icons.people, size: 16, color: Colors.blue),
                const SizedBox(width: 4),
                Text(
                  '‡∏£‡∏±‡∏ö ${session.learnerLimit > 20 ? 20 : session.learnerLimit} ‡∏Ñ‡∏ô',
                  style: const TextStyle(color: Colors.blue),
                ),
              ],
            ),
            const SizedBox(height: 12),

            // Enroll Button
            if (!isExpired)
              Center(
                child: EnrollButton(
                  sessionId: session.id,
                  learnerId: learnerId,
                  onEnrollSuccess: onEnrollSuccess,
                ),
              )
            else
              const Center(
                child: Text(
                  '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô',
                  style: TextStyle(
                    color: Colors.red,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }
}
